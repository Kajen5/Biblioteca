import os
import re
from os import scandir, getcwd, listdir
from os.path import abspath
from ebooklib import epub

# end try


def make_intro_page(novel_title):
    print('Creating intro page')
    source_url = 'Unknown'
    github_url = 'https://github.com/dipu-bd/lightnovel-crawler'

    intro_html = '<div style="%s">' % ';'.join([
        'height: 9in',
        'display: flex',
        'flex-direction: column',
        'justify-content: space-between',
        'text-align: center',
    ])

    intro_html += '''
        <div>
            <h1>%s</h1>
        </div>
    ''' % (novel_title)

    intro_html += '''
    <div>
        <p><b>Source:</b> <a href="%s">%s</a></p>
        <p><i>Generated by <b><a href="%s">Lightnovel Crawler</a></b></i></p>
    </div>''' % (source_url, source_url, github_url)

    intro_html += '</div>'
    return epub.EpubHtml(
        uid='intro',
        file_name='intro.xhtml',
        title='Intro',
        content=intro_html,
    )
# end def


def make_chapters(book, chapters):
    book_id = 2
    book.toc = []
    lista = ls(r"G:\Proyectos\prueba01\book\static\book")
    novel = lista[book_id].split('\\')[-1]
    for i, chapterr in enumerate(chapters):
        chapter, title = chapterr
        try:
            f = open(r"G:\Proyectos\prueba01\book\static\book" + '\\' +
                     novel + '\\' + chapter + ".txt", "r", encoding="utf-8")
            text = f.read()
        except Exception:
            f = open(r"G:\Proyectos\prueba01\book\static\book" + '\\' +
                     novel + '\\' + chapter + ".txt", "r")
            text = f.read()
        pag_padres = re.search(
            "Titulo: (.*?)\nConenido:\n(.*?)\n<--final-->",
            text, re.DOTALL)
        titulo = pag_padres.group(1)
        contenido = remove_html_tags(pag_padres.group(2)) 
        contenido = "<h1>" + titulo + "</h1>" + contenido 
        # pattern = re.compile('w data-content=".*?"')
        # h = pattern.findall(contenido)
        # print(h)
        # j = pattern.sub(lambda x : 'a href="#n{}" epub:type="noteref"'.format(h.index(x)) , contenido)
        # result = re.sub(pattern, lambda exp: 'a href="#n{}" epub:type="noteref"'.format(int(exp.groups(1)) + 1), contenido)
        # print(j)
        # contenido += "<aside id="n" epub:type="footnote" >This is a note<aside>"
        xhtml_file = 'chap_%s.xhtml' % str(i + 1).rjust(5, '0')
        content = epub.EpubHtml(
            uid=str(i + 1),
            file_name=xhtml_file,
            title=titulo,
            content=contenido or '',
        )
        book.add_item(content)
        book.toc.append(content)
    # end for
# end def


def bind_epub_book(novel_title, chapters, volume=''):
    # print('Binding epub: %s' % book_title)
    book_title = (novel_title + ' ' + volume).strip()
    # Create book
    book = epub.EpubBook()
    book.set_language('en')
    book.set_title(book_title)

    # Create intro page
    intro_page = make_intro_page(novel_title)
    book.add_item(intro_page)

    # Create book spine
    book.spine = [intro_page, 'nav']
    # end if
    # Create chapters
    make_chapters(book, chapters)
    book.spine += book.toc
    book.add_item(epub.EpubNav())
    book.add_item(epub.EpubNcx())
    lnmtl = False
    '''if lnmtl:
        h = {
            ("jquery", "jquery.min.js"),
            ("popper", "popper.min.js"),
            ("bootstrap", "bootstrap.min.js"),
            ("myScript", "myScript.js")
        }
        for i, j in h:
            f = open(j, "r")
            k = epub.EpubItem(file_name="js/" + j, content=f.read())
            book.add_item(k)
        css = {
            ("bootstrap-css", "bootstrap.min.css"),
            ("bootstrap-css-map", "bootstrap.min.css.map")
        }
        for i, j in css:
            f = open(j, "r")
            k = epub.EpubItem(file_name="css/" + j, content=f.read())
            book.add_item(k)'''
    style = 't {color: blue;}'
    nav_css = epub.EpubItem(uid="style_nav", file_name="style/nav.css", media_type="text/css", content=style)
    book.add_item(nav_css)
    epub_path = os.path.join('epub')
    file_name = (novel_title + ' ' + volume.split(":")[0]).strip()
    file_path = os.path.join(epub_path, file_name + '.epub')
    print('Writing %s' % file_path)
    os.makedirs(epub_path, exist_ok=True)
    # Save epub file
    print(file_path)
    epub.write_epub(file_path, book, {})
    print('Created: %s.epub' % file_name)
    return file_path
# end def


def make_epubs(novel_title, data):
    epub_files = []
    for numero, book, lista_chapters in data:
        if len(lista_chapters) > 0:
            book = bind_epub_book(
                novel_title,
                volume=str(int(numero) + 1) + ": " + book,
                # volume=str(int(numero) + 1),
                chapters=lista_chapters,
            )
            epub_files.append(book)
        # end if
    # end for
    return epub_files


def prueba(book_id):
    lista = ls(r"G:\Proyectos\prueba01\book\static\book")
    lista_book = list()
    novel = lista[book_id].split('\\')[-1]
    try:
        f = open(r"G:\Proyectos\prueba01\book\static\book" + '\\' +
                 novel + '\\' +
                 "enlaces.txt", "r", encoding="utf-8")
        text = f.read()
        pag_padres = re.findall(
            r"book cargada -->>(\d+) Titulo: (.*?)\n(.*?)Link de book -->>",
            text, re.DOTALL)
        for numero, book, chapters in pag_padres:
            lista_chapters = re.findall(
                r'(\d+?_\d+?).txt -- (.*?)\n', chapters)
            lista_book.append((numero, book, lista_chapters))
        f.close()
    except Exception as e:
        print(e)
        pass
    return {'novel': novel, 'lista': lista_book}


def remove_html_tags(text):
    """Remove html tags from a string"""
    h = {
        ('</span.*?>',''),
        ('<span.*?>',''),
        ('style=.*?>','>'),
        #'<w data-title=.*?>':'',
        # (' data-title=.*?>', '>'),
        #'<w data-title="(.*?)">(.*?)</w>':'<ruby>\\2<rt>\\1</ruby>',
        # (' data-title=.*?>', '>'),
        ('data-title="(.*?)">(.*?)<','><ruby>\\2<rt>\\1</ruby><'),
        ('<w>',''),
        # ('data-title=', 'data-content='),
        ('<sentence','<p'),
        ('</sentence','</p'),
        ('dir="ltr"',''),
        ('\n',''),
        # (' data-content=.*?>', '>'),
        ('</w>',''),
        (' class=.*?>','>')
    }
    clean = re.compile('|'.join(map(re.escape, h.keys())))
    text = clean.sub(lambda match: h[match.group(0)], text)
    return text


def ls(path):
    return [abspath(arch.path) for arch in scandir(path) if not arch.is_file()]


if __name__ == '__main__':
    h = prueba(2)
    make_epubs(h['novel'], h['lista'])
# end def
